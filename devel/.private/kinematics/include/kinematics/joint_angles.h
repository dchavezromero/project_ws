// Generated by gencpp from file kinematics/joint_angles.msg
// DO NOT EDIT!


#ifndef KINEMATICS_MESSAGE_JOINT_ANGLES_H
#define KINEMATICS_MESSAGE_JOINT_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kinematics
{
template <class ContainerAllocator>
struct joint_angles_
{
  typedef joint_angles_<ContainerAllocator> Type;

  joint_angles_()
    : theta1(0.0)
    , theta2(0.0)
    , theta3(0.0)
    , theta4(0.0)
    , theta5(0.0)
    , theta6(0.0)
    , theta7(0.0)  {
    }
  joint_angles_(const ContainerAllocator& _alloc)
    : theta1(0.0)
    , theta2(0.0)
    , theta3(0.0)
    , theta4(0.0)
    , theta5(0.0)
    , theta6(0.0)
    , theta7(0.0)  {
  (void)_alloc;
    }



   typedef double _theta1_type;
  _theta1_type theta1;

   typedef double _theta2_type;
  _theta2_type theta2;

   typedef double _theta3_type;
  _theta3_type theta3;

   typedef double _theta4_type;
  _theta4_type theta4;

   typedef double _theta5_type;
  _theta5_type theta5;

   typedef double _theta6_type;
  _theta6_type theta6;

   typedef double _theta7_type;
  _theta7_type theta7;





  typedef boost::shared_ptr< ::kinematics::joint_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinematics::joint_angles_<ContainerAllocator> const> ConstPtr;

}; // struct joint_angles_

typedef ::kinematics::joint_angles_<std::allocator<void> > joint_angles;

typedef boost::shared_ptr< ::kinematics::joint_angles > joint_anglesPtr;
typedef boost::shared_ptr< ::kinematics::joint_angles const> joint_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinematics::joint_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinematics::joint_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kinematics::joint_angles_<ContainerAllocator1> & lhs, const ::kinematics::joint_angles_<ContainerAllocator2> & rhs)
{
  return lhs.theta1 == rhs.theta1 &&
    lhs.theta2 == rhs.theta2 &&
    lhs.theta3 == rhs.theta3 &&
    lhs.theta4 == rhs.theta4 &&
    lhs.theta5 == rhs.theta5 &&
    lhs.theta6 == rhs.theta6 &&
    lhs.theta7 == rhs.theta7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kinematics::joint_angles_<ContainerAllocator1> & lhs, const ::kinematics::joint_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kinematics::joint_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinematics::joint_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinematics::joint_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinematics::joint_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinematics::joint_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinematics::joint_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinematics::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8d6cfc93d9c18a43f67f9435ffa4b9a";
  }

  static const char* value(const ::kinematics::joint_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8d6cfc93d9c18a4ULL;
  static const uint64_t static_value2 = 0x3f67f9435ffa4b9aULL;
};

template<class ContainerAllocator>
struct DataType< ::kinematics::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinematics/joint_angles";
  }

  static const char* value(const ::kinematics::joint_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinematics::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta1\n"
"float64 theta2\n"
"float64 theta3\n"
"float64 theta4\n"
"float64 theta5\n"
"float64 theta6\n"
"float64 theta7\n"
;
  }

  static const char* value(const ::kinematics::joint_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinematics::joint_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta1);
      stream.next(m.theta2);
      stream.next(m.theta3);
      stream.next(m.theta4);
      stream.next(m.theta5);
      stream.next(m.theta6);
      stream.next(m.theta7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinematics::joint_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinematics::joint_angles_<ContainerAllocator>& v)
  {
    s << indent << "theta1: ";
    Printer<double>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<double>::stream(s, indent + "  ", v.theta2);
    s << indent << "theta3: ";
    Printer<double>::stream(s, indent + "  ", v.theta3);
    s << indent << "theta4: ";
    Printer<double>::stream(s, indent + "  ", v.theta4);
    s << indent << "theta5: ";
    Printer<double>::stream(s, indent + "  ", v.theta5);
    s << indent << "theta6: ";
    Printer<double>::stream(s, indent + "  ", v.theta6);
    s << indent << "theta7: ";
    Printer<double>::stream(s, indent + "  ", v.theta7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINEMATICS_MESSAGE_JOINT_ANGLES_H
