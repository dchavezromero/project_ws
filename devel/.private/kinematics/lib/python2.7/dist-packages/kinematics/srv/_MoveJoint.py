# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinematics/MoveJointRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kinematics.msg

class MoveJointRequest(genpy.Message):
  _md5sum = "d79d8a7ed95cb38190b2abaabcce5da1"
  _type = "kinematics/MoveJointRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """joint_angles joint_set_points

================================================================================
MSG: kinematics/joint_angles
float64 theta1
float64 theta2
float64 theta3
float64 theta4
float64 theta5
float64 theta6
float64 theta7"""
  __slots__ = ['joint_set_points']
  _slot_types = ['kinematics/joint_angles']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_set_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_set_points is None:
        self.joint_set_points = kinematics.msg.joint_angles()
    else:
      self.joint_set_points = kinematics.msg.joint_angles()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.joint_set_points.theta1, _x.joint_set_points.theta2, _x.joint_set_points.theta3, _x.joint_set_points.theta4, _x.joint_set_points.theta5, _x.joint_set_points.theta6, _x.joint_set_points.theta7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_set_points is None:
        self.joint_set_points = kinematics.msg.joint_angles()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.joint_set_points.theta1, _x.joint_set_points.theta2, _x.joint_set_points.theta3, _x.joint_set_points.theta4, _x.joint_set_points.theta5, _x.joint_set_points.theta6, _x.joint_set_points.theta7,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.joint_set_points.theta1, _x.joint_set_points.theta2, _x.joint_set_points.theta3, _x.joint_set_points.theta4, _x.joint_set_points.theta5, _x.joint_set_points.theta6, _x.joint_set_points.theta7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_set_points is None:
        self.joint_set_points = kinematics.msg.joint_angles()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.joint_set_points.theta1, _x.joint_set_points.theta2, _x.joint_set_points.theta3, _x.joint_set_points.theta4, _x.joint_set_points.theta5, _x.joint_set_points.theta6, _x.joint_set_points.theta7,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinematics/MoveJointResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveJointResponse(genpy.Message):
  _md5sum = "1d7edd7f640319e72564c9ef71c5afb3"
  _type = "kinematics/MoveJointResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool valid_position
"""
  __slots__ = ['valid_position']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid_position is None:
        self.valid_position = False
    else:
      self.valid_position = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.valid_position
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.valid_position,) = _get_struct_B().unpack(str[start:end])
      self.valid_position = bool(self.valid_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.valid_position
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.valid_position,) = _get_struct_B().unpack(str[start:end])
      self.valid_position = bool(self.valid_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MoveJoint(object):
  _type          = 'kinematics/MoveJoint'
  _md5sum = 'bc0ca7f92d556a08737d72803818c721'
  _request_class  = MoveJointRequest
  _response_class = MoveJointResponse
